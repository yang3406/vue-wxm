
vuex(就是一个单例对象)
就是状态管理模式,采用集中式存储管理应用的所有组件的状态
核心就是一个store 包含着应用中大部分的状态(state)
和全局对象有两点区别
1:vuex中存储的状态是响应式的,当你在使用store 读取状态(state)时,
如果状态发生改变,则相应的组件也会得到更新
2;要想更新store中的状态,仅仅能用commit mutation好处,易于跟踪每个状态的变化

使用：
1:安装vuex
2:引入vuex
3:Vue.use(Vuex)
4:const store = new Vuex.store({
           state:{count:0},
           mutations:{

            }
           })
然后把store注入到new vue({store })中
把store从根组件注入到每一个子组件中
不需要在子组件频繁的引入vuex state组件
在所有子组件中都可以通过this.$store.state.count 访问到

核心概念:
1:state
读取state 最佳是在 组件的computed中
mapState辅助函数的使用
当一个组件需要获取多个状态时,把这些属性都声明为计算属性会有些冗余,
用mapState帮我们生成计算属性
// 在单独构建的版本中辅助函数为 Vuex.mapState
import { mapState } from 'vuex'
computed: mapState({
    // 箭头函数可使代码更简练
    count: state => state.count,

    // 传字符串参数 'count' 等同于 `state => state.count`
    countAlias: 'count',

    // 为了能够使用 `this` 获取局部状态，必须使用常规函数
    countPlusLocalState (state) {
      return state.count + this.localCount
    }
  })

  mapState作用把this.$store.state.count 简化为 state.count
              把方法映射 countAlias: 'count',例如 在子组件中直接使用countAlias即可

  mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用
  computed: {
    localComputed () { /* ... */ },
    // 使用对象展开运算符将此对象混入到外部对象中
    ...mapState({
      // ...
    })
  }

2:getter
arr.find(fn(n))只取第一个
类似组建的method 用来过滤状态 选取符合的状态
用法
Vue.use(Vuex);
new Vuex.store({
   state:{nums:[1,2,3,4,5]},
   getters:{
      //用法1 单独使用 state可以作为参数传进去
      gt3:state => {return state.nums.filter(num=>num>3)};
      //用法2 引入其他getters的
      getGet3 => (state,getters) => getters.get3;
      //用法3 让getter返回一个函数 接收参数 实现对getter传参 子组件传参
      egnum => (state) => (id) =>{
         return state.nums.find(num => num === id)
      }
   }
})
子组件引入
1: this.$store.getters.get3
2: this.$store.getters.getGet3
3:this.$store.getters.eqnum(2)

mapGetters辅助函数
把sotore的getters映射到局部计算属性
import { mapGetters } from 'vuex'

export default {
  // ...
  computed: {
  // 使用对象展开运算符将 getter 混入 computed 对象中
    ...mapGetters([
      'gt3',
      'getGet3',
      // ...
    ])
  }
}
通过this.get3()等使用

3:mutation
改变状态的唯一方法就是触发mutation 类似于事件
每个mutation都有一个事件类型(type)和一个回调函数 回调函数就是状态修改的地方
例如
先注册
const sotre = new Vuex.store({
    state:{count:0},
    mutations:{
      add (state){
         state.count++
      },
      //载荷
      less (state,num){
         state.count-num;
      },
      //载荷 传对象
      lessObj (state,obj){
         state.count-obj.num
      }
    }
})
触发 注意是"add" 不是add
store.commit("add")

提交载荷(参数)
store.commit("less",2)
  在提交载荷时 最好传对象
  store.commit("lessObj",{num:2})
  对象方式的提交 会自动识别type
  store.commit({type:"lessObj",num:2)

响应规则
1:因为是响应式的,最好在store中初始化所有的属性
2:当需要添加新的属性时,Vue.set(obj,'newPro',123)
或
state.obj = { ...state.obj, newProp: 123 }

为了便于追踪 使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。
这样可以使 linter 之类的工具发挥作用，
同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然
// mutation-types.js
export const SOME_MUTATION = 'SOME_MUTATION'
// store.js
import Vuex from 'vuex'
import { SOME_MUTATION } from './mutation-types'

const store = new Vuex.Store({
  state: { ... },
  mutations: {
    // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名
    [SOME_MUTATION] (state) {
      // mutate state
    }
  }
})

Mutation 必须是同步函数

在组件中提交 Mutation
import { mapMutations } from 'vuex'

export default {
  // ...
  methods: {
    ...mapMutations([
      'increment', // 将 `this.increment()` 映射为 `this.$store.commit('increment')`

      // `mapMutations` 也支持载荷：
      'incrementBy' // 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`
    ]),
    ...mapMutations({
      add: 'increment' // 将 `this.add()` 映射为 `this.$store.commit('increment')`
    })
  }
}


4:action
1:action提交的是mutation,而不是直接变更状态
2:action可以包含任何异步状态
const store = new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment (state) {
      state.count++
    }
  },
  actions: {
    increment (context) {
      context.commit('increment')
    }
  }
})
触发action store.dispatch('increment')
流程 store.dispatch('increment') ==> 触发action increment(state) ==>触发mutation context.commit('increment')
参数context是什么呢
他是一个和store实例具有相同方法和属性的对象 所以我们可以用context.state,context.getters
反正要触发mutation 为什么不直接触发呢？
因为action可以有异步操作
actions: {
  incrementAsync ({ commit }) {
    setTimeout(() => {
      commit('increment')
    }, 1000)
  }
}
// 以载荷形式分发
store.dispatch('incrementAsync', {
  amount: 10
})

// 以对象形式分发
store.dispatch({
  type: 'incrementAsync',
  amount: 10
})

具体异步触发 请看文档


5:module





