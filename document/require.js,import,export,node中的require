
require.js 异步加载  AMD规范 主要用于浏览器
<script src="js/require.js" data-main="js/main"></script>
入口 js/main.js

依赖其他模块 moduleA moduleB在main.js在同一个目录
require(['moduleA','moduleB'],function(moduleA,moduleB){


  return
})
如上栗:
require(Array,callback)
第一个参数为依赖的模块
第二个为回调,当前面的模块都加载成功后,会被调用
require() 异步加载moduleA,moduleB,浏览器不会失去响应.当模块加载完后,才会运行回调

require.config()
对模块加载行为进行自定义,require.config()写在住模块main.js的头部。参数是对象
这个对象的paths属性指定各个模块的加载路径 加载的模块都和main.js的同层
require.config(paths:{
    "jquery": "jquery.min",
    "underscore": "underscore.min",
    "backbone": "backbone.min"
    })
// 模块和main.js不在同一层 写法一
require.config({
　　　　paths: {
　　　　　　"jquery": "lib/jquery.min",
　　　　　　"underscore": "lib/underscore.min",
　　　　　　"backbone": "lib/backbone.min"
　　　　}
　　});
// 模块和main.js不在同一层 写法二
require.config({
    baseUrl:'js/lib',
    paths:{
       "jquery": "jquery.min",
       "underscore": "underscore.min",
       "backbone": "backbone.min"
    }
})
//也可以直接指定远程服务器
require.config({
　paths: {
　　　"jquery": "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min"
　}
});

也可以把多个js合并 减少http请求

注意
通过require.js加载的模块,必须采用AMD规范来写
具体来说，就是模块必须采用特定的define()定义
//diy一个参数为数组依赖的模块,没有,可以不写,第二个为回调
//a.js
define(['myLib'],function(myLib){
   function foo(param1,param1){
     mylib.doSomething(a)
   }

   return{
     foo:foo
   }
})
//b.js 引入
define([a],function(a){
  alert(a.foo(p1,p2));
})

加载非规范的模块 shim
非规范的模块 必须先定义它们的特征
//exports 外部调用名字 deps依赖数组
require.config({
  baseUrl:'resources/scripts/',
  paths:{
    "jquery":'lib/jquery.1.12.min',
     "highcharts": "lib/highcharts"
  },
  shim:{
    exports:'highcharts',
    deps:["jquery"]
  }
})


//   js/script/alertdesc.js
define(['script/desc'],function(desc){
    return function (){
        alert(JSON.stringify(desc));
    };
})

//   然后在main.js的再引入  js/script/main.js
   引入的是上一个返回的值或对象
   require(['script/alertdesc'],function(alertdesc){
     alertdesc();

作者：wuqke
链接：https://www.jianshu.com/p/b8a6824c8e07
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
http://www.jb51.net/article/120949.htm


ES6 的import 和 export 实现了模块功能
可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。
ES6模块主要有两个功能：export和import
export用于对外输出本模块（一个文件可以理解为一个模块）变量的接口
import用于在一个模块中加载另一个含有export接口的模块。

使用一: 导出固定变量名
//a.js 导出
var sex="boy";
var sayName=function(name){
　　console.log(name)
}
//要加大括号 不加 export "boy"为常量 引入的读取不到 输出的变量才行
export {sex,sayName}
也可以直接
export const secx = "boy"
export const sayName=function(name){
　　console.log(name)
}

//b.js 引入 引入的变量名和引出的变量名一致
import {sex,sayName} from './a.js'

使用二：导出自定义变量名 default 注意一个文件里面只要有一个default
//a.js 导出
var sex="boy";
//有 default 不加{} 加了变为导出一个对象 这里是导出变量
export default sex;

//b.js 导入  param 为随便命名
import param from './a.js'
//默认导出对象 a.js
export default {
   sayName(name){
      console.log(name)
   },
   sex:'boy'
   }
}
//引入默认对象 b.js
import getA from './a.js'
getA.sex;
getA.sayName("bill")

使用3:对于引用 可以把所有a.js里面的export的变量全部以对象形式引入到a.js中
//a.js
export const sex = "boy"
export const name = "liLy"
export const sayHi = function(){
   console.log("say HI")
}

//b.js
import * as getA from a.js
getA.sex;
getA.sayHi("hello world")


COMMON JS 主要用于服务器 如seaJS
